namespace SpeechForms.Extensions;

internal class AiSpeechText
{
   public static Dictionary<string, int> GenerateNumberWordsDictionary()
    {
        var numberWords = new Dictionary<string, int>
    {
        { "ноль", 0 },
        { "нуль", 0 },

        { "один", 1 },
        { "первыи", 1 },
        { "первая", 1 },
        { "первое", 1 },
        { "первого", 1 },

        { "два", 2 },
        { "второи", 2 },
        { "вторая", 2 },
        { "второе", 2 },
        { "второго", 2 },

        { "три", 3 },
        { "третии", 3 },
        { "третья", 3 },
        { "третье", 3 },
        { "третьего", 3 },

        { "четыре", 4 },
        { "четвертыи", 4 },
        { "четвертая", 4 },
        { "четвертое", 4 },
        { "четвертого", 4 },

        { "пять", 5 },
        { "пятыи", 5 },
        { "пятая", 5 },
        { "пятое", 5 },
        { "пятого", 5 },

        { "шесть", 6 },
        { "шестои", 6 },
        { "шестая", 6 },
        { "шестое", 6 },
        { "шестого", 6 },

        { "семь", 7 },
        { "седьмои", 7 },
        { "седьмая", 7 },
        { "седьмое", 7 },
        { "седьмого", 7 },

        { "восемь", 8 },
        { "восьмои", 8 },
        { "восьмая", 8 },
        { "восьмое", 8 },
        { "восьмого", 8 },

        { "девять", 9 },
        { "девятыи", 9 },
        { "девятая", 9 },
        { "девятое", 9 },
        { "девятого", 9 },

        { "десять", 10 },
        { "десятыи", 10 },
        { "десятая", 10 },
        { "десятое", 10 },
        { "десятого", 10 },

        { "одиннадцать", 11 },
        { "одиннадцатыи", 11 },
        { "одиннадцатая", 11 },
        { "одиннадцатое", 11 },
        { "одиннадцатого", 11 },

        { "двенадцать", 12 },
        { "двенадцатыи", 12 },
        { "двенадцатая", 12 },
        { "двенадцатое", 12 },
        { "двенадцатого", 12 },

        { "тринадцать", 13 },
        { "тринадцатыи", 13 },
        { "тринадцатая", 13 },
        { "тринадцатое", 13 },
        { "тринадцатого", 13 },

        { "четырнадцать", 14 },
        { "четырнадцатыи", 14 },
        { "четырнадцатая", 14 },
        { "четырнадцатое", 14 },
        { "четырнадцатого", 14 },

        { "пятнадцать", 15 },
        { "пятнадцатыи", 15 },
        { "пятнадцатая", 15 },
        { "пятнадцатое", 15 },
        { "пятнадцатого", 15 },

        { "шестнадцать", 16 },
        { "шестнадцатыи", 16 },
        { "шестнадцатая", 16 },
        { "шестнадцатое", 16 },
        { "шестнадцатого", 16 },

        { "семнадцать", 17 },
        { "семнадцатыи", 17 },
        { "семнадцатая", 17 },
        { "семнадцатое", 17 },
        { "семнадцатого", 17 },

        { "восемнадцать", 18 },
        { "восемнадцатыи", 18 },
        { "восемнадцатая", 18 },
        { "восемнадцатое", 18 },
        { "восемнадцатого", 18 },

        { "девятнадцать", 19 },
        { "девятнадцатыи", 19 },
        { "девятнадцатая", 19 },
        { "девятнадцатое", 19 },
        { "девятнадцатого", 19 },

        { "двадцать", 20 },
        { "двадцатыи", 20 },
        { "двадцатая", 20 },
        { "двадцатое", 20 },
        { "двадцатого", 20 },

        { "двадцать один", 21 },
        { "двадцать первыи", 21 },
        { "двадцать первая", 21 },
        { "двадцать первое", 21 },
        { "двадцать первого", 21 },

        { "двадцать два", 22 },
        { "двадцать второи", 22 },
        { "двадцать вторая", 22 },
        { "двадцать второе", 22 },
        { "двадцать второго", 22 },

        { "двадцать три", 23 },
        { "двадцать третии", 23 },
        { "двадцать третья", 23 },
        { "двадцать третье", 23 },
        { "двадцать третьего", 23 },

        { "двадцать четыре", 24 },
        { "двадцать четвертыи", 24 },
        { "двадцать четвертая", 24 },
        { "двадцать четвертое", 24 },
        { "двадцать четвертого", 24 },

        { "двадцать пять", 25 },
        { "двадцать пятыи", 25 },
        { "двадцать пятая", 25 },
        { "двадцать пятое", 25 },
        { "двадцать пятого", 25 },

        { "двадцать шесть", 26 },
        { "двадцать шестои", 26 },
        { "двадцать шестая", 26 },
        { "двадцать шестое", 26 },
        { "двадцать шестого", 26 },

        { "двадцать семь", 27 },
        { "двадцать седьмои", 27 },
        { "двадцать седьмая", 27 },
        { "двадцать седьмое", 27 },
        { "двадцать седьмого", 27 },

        { "двадцать восемь", 28 },
        { "двадцать восьмои", 28 },
        { "двадцать восьмая", 28 },
        { "двадцать восьмое", 28 },
        { "двадцать восьмого", 28 },

        { "двадцать девять", 29 },
        { "двадцать девятыи", 29 },
        { "двадцать девятая", 29 },
        { "двадцать девятое", 29 },
        { "двадцать девятого", 29 },

        { "тридцать", 30 },
        { "тридцатыи", 30 },
        { "тридцатая", 30 },
        { "тридцатое", 30 },
        { "тридцатого", 30 },

        { "тридцать один", 31 },
        { "тридцать первыи", 31 },
        { "тридцать первая", 31 },
        { "тридцать первое", 31 },
        { "тридцать первого", 31 }
    };

        return numberWords;
    }

   public static List<int> ConvertWordsToNumbers(string input, Dictionary<string, int> numberWords)
   {
       var words = input.Split(new[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries);
       var numbers = new List<int>();
       var compositeBuffer = new List<string>();

       foreach (var word in words)
       {
           compositeBuffer.Add(word);
           var compositeWord = string.Join(" ", compositeBuffer);

           if (numberWords.ContainsKey(compositeWord))
           {
               numbers.Add(numberWords[compositeWord]);
               compositeBuffer.Clear();
           }
           else
           {
               var compositeNumber = ParseCompositeNumber(compositeBuffer, numberWords);
               if (compositeNumber.HasValue)
               {
                   numbers.Add(compositeNumber.Value);
                   compositeBuffer.Clear();
               }
           }
       }

       return numbers;
   }

   static int? ParseCompositeNumber(List<string> words, Dictionary<string, int> numberWords)
   {
       int number = 0;
       bool isComposite = false;

       foreach (var part in words)
       {
           if (numberWords.ContainsKey(part))
           {
               number += numberWords[part];
               isComposite = true;
           }
           else
           {
               return null;
           }
       }

       return isComposite ? (int?)number : null;
   }

}
